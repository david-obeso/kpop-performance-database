CREATE TABLE performances (
    performance_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,                 -- e.g., "Live at Glastonbury 2023 - Main Stage"
    performance_date TEXT,               -- YYYY-MM-DD
    show_type TEXT,                      -- e.g., 'Concert', 'Festival', 'TV Appearance', 'Radio Session'
    resolution TEXT,                     -- e.g., '1080p', '720p', '4K', 'Audio'
    file_path1 TEXT UNIQUE,              -- Path on computer 1 (can be NULL)
    file_path2 TEXT UNIQUE,              -- Path on computer 2 (can be NULL)
    file_url TEXT UNIQUE,                -- URL to the file (can be NULL)
    score INTEGER,                       -- User rating
    last_checked_at TEXT,                -- Timestamp (ISO8601) of when this record was last synced/verified (Consider adding this for consistency)
    CONSTRAINT chk_performance_location CHECK (file_path1 IS NOT NULL OR file_path2 IS NOT NULL OR file_url IS NOT NULL)
);

CREATE TABLE performance_artist_link (
    performance_id INTEGER NOT NULL,
    artist_id INTEGER NOT NULL,
    artist_order INTEGER DEFAULT 1, -- Primary (1), featured (2), etc.
    PRIMARY KEY (performance_id, artist_id),
    FOREIGN KEY (performance_id) REFERENCES performances (performance_id) ON DELETE CASCADE,
    -- If a performance is deleted, remove its links to artists.
    FOREIGN KEY (artist_id) REFERENCES artists (artist_id) ON DELETE CASCADE
    -- If an artist is deleted, remove their links to performances.
    -- The performance record itself will NOT be deleted, fulfilling your requirement.
);

CREATE TABLE music_videos (
    mv_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,                 -- e.g., "Official Video for Song X"
    release_date TEXT,                   -- YYYY-MM-DD
    file_path1 TEXT UNIQUE,              -- Path on computer 1 (can be NULL)
    file_path2 TEXT UNIQUE,              -- Path on computer 2 (can be NULL)
    file_url TEXT UNIQUE,                -- URL to the file (can be NULL)
    score INTEGER,                       -- User rating
    last_checked_at TEXT,                -- Timestamp (ISO8601) of when this record was last synced/verified (Consider adding this for consistency)
    CONSTRAINT chk_mv_location CHECK (file_path1 IS NOT NULL OR file_path2 IS NOT NULL OR file_url IS NOT NULL)
);

CREATE TABLE music_video_artist_link (
    mv_id INTEGER NOT NULL,
    artist_id INTEGER NOT NULL,
    artist_order INTEGER DEFAULT 1, -- Primary (1), featured (2), etc.
    PRIMARY KEY (mv_id, artist_id),
    FOREIGN KEY (mv_id) REFERENCES music_videos (mv_id) ON DELETE CASCADE,
    -- If a music video is deleted, remove its links to artists.
    FOREIGN KEY (artist_id) REFERENCES artists (artist_id) ON DELETE CASCADE
    -- If an artist is deleted, remove their links to music videos.
    -- The music video record itself will NOT be deleted.
);

CREATE TABLE "song_performance_link" (
    "song_id" INTEGER NOT NULL,
    "performance_id" INTEGER NOT NULL,
    PRIMARY KEY ("song_id", "performance_id"),
    FOREIGN KEY ("song_id") REFERENCES "songs" ("song_id") ON DELETE CASCADE,
    FOREIGN KEY ("performance_id") REFERENCES "performances" ("performance_id") ON DELETE CASCADE
);

CREATE TABLE "song_music_video_link" (
    "song_id" INTEGER NOT NULL,
    "music_video_id" INTEGER NOT NULL, -- Renamed from mv_id to be consistent with the column name in music_videos table it references (mv_id)
    PRIMARY KEY ("song_id", "music_video_id"),
    FOREIGN KEY ("song_id") REFERENCES "songs" ("song_id") ON DELETE CASCADE,
    FOREIGN KEY ("music_video_id") REFERENCES "music_videos" ("mv_id") ON DELETE CASCADE
);
