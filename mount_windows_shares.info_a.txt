=============================================================
 Explanation for the Windows Share Mounting Script
=============================================================

**Purpose of this Script:**

This script automatically connects ("mounts") specific shared folders (like drives F:, G:, H:) from a Windows computer onto your Ubuntu computer. This makes those Windows folders appear as local folders within your Ubuntu system, allowing you to easily access files on the Windows PC directly from Ubuntu over your local network.

**How it Works - Step-by-Step:**

1.  **`#!/bin/bash`**:
    *   This is called a "shebang". It's always the very first line.
    *   It tells your Ubuntu system that this script should be run using the `bash` program, which is a standard command interpreter (like a translator for commands).

2.  **`# --- Configuration ---`**:
    *   Lines starting with `#` are comments. They are ignored by the computer but are helpful notes for humans reading the script. This line just marks the start of the settings section.

3.  **`WIN_IP="000.000.0.00"`**:
    *   This line creates a variable named `WIN_IP`.
    *   It stores the network address (IP address) of the Windows computer you want to connect to.
    *   **IMPORTANT:** You need to change `000.000.0.00` to the actual IP address of your Windows PC on your local network.

4.  **`WIN_USER="******"`**:
    *   This creates a variable named `WIN_USER`.
    *   It stores the username you use to log into the Windows computer.
    *   This might sometimes be optional *if* the username is already stored correctly inside the credentials file (see next point). However, it's good practice to include it.
    *   **IMPORTANT:** You might need to change `******` to your actual Windows username.

5.  **`CREDS_FILE="/home/********/.smbcredentials"`**:
    *   This creates a variable named `CREDS_FILE`.
    *   It stores the full path to a special file on your Ubuntu computer. This file (`.smbcredentials`) securely stores the username and password needed to access the Windows shares.
    *   Storing credentials in a separate file is much safer than writing your password directly into the script.
    *   The file typically contains lines like:
        ```
        username=YourWindowsUsername
        password=YourWindowsPassword
        # domain=OptionalWindowsDomain
        ```
    *   **IMPORTANT:** Ensure this file exists at `/home/********/.smbcredentials` and contains your correct Windows login details. You also need to make sure only you can read this file for security (using a command like `chmod 600 /home/********/.smbcredentials`). The `.` at the beginning of `.smbcredentials` makes it a hidden file. chmod 600 modifies the file permissions so that only the owner can read and write.

6.  **`SHARES=( ... )`**:
    *   This creates a list (called an "array") named `SHARES`.
    *   Each item in the list defines one Windows share you want to mount and where you want it to appear on your Ubuntu machine.
    *   The format is `"WINDOWS_SHARE_NAME|LOCAL_FOLDER_NAME"`.
        *   `WINDOWS_SHARE_NAME`: This is the name the folder is shared as on the Windows PC (e.g., `F`, `G`, `H` if you shared the entire drives with those letters).
        *   `LOCAL_FOLDER_NAME`: This is the name of the folder that will be created inside your `/home/********/` directory on Ubuntu. This folder will act as the entry point to the Windows share.
    *   **Example:** `"F|windows_f_drive"` means: Connect to the Windows share named `F` and make it accessible inside the `/home/*********/windows_f_drive` folder on Ubuntu.
    *   **IMPORTANT:** You need to change these entries to match the actual share names on your Windows PC and choose suitable local folder names for your Ubuntu system.

7.  **`USER_UID=$(id -u)` and `USER_GID=$(id -g)`**:
    *   These lines find out the numeric User ID (`UID`) and Group ID (`GID`) of the person currently running the script (that's you!).
    *   `id -u` gets the User ID, `id -g` gets the Group ID.
    *   The `$(...)` part executes the command inside and captures its output.
    *   This information is used later (`uid=$USER_UID,gid=$USER_GID` in `MOUNT_OPTS`) to ensure that files you access or create on the mounted Windows shares belong to *your* Ubuntu user, so you have the correct permissions to read and write them.

8.  **`MOUNT_OPTS="..."`**:
    *   This creates a variable named `MOUNT_OPTS` that holds a string of options for the `mount` command (which does the actual connection). These options customize how the connection is made:
        *   `credentials=$CREDS_FILE`: Tells the `mount` command to get the username and password from the file specified earlier (`/home/*********/.smbcredentials`).
        *   `uid=$USER_UID`: Sets the owner of the mounted files (on the Ubuntu side) to your user ID.
        *   `gid=$USER_GID`: Sets the group owner of the mounted files (on the Ubuntu side) to your group ID.
        *   `vers=3.0`: Specifies the version of the SMB/CIFS protocol (the language computers use to talk for file sharing) to use. Version 3.0 is modern and preferred for newer Windows versions. If connection fails, you might try `vers=2.1` or even `vers=1.0` for older systems.
        *   `iocharset=utf8`: Helps handle filenames with special characters (like accents, symbols, non-English letters) correctly. `utf8` is a standard character encoding.
        *   `nounix`: Disables some Linux-specific extensions that don't always work well with Windows shares, improving compatibility.
        *   `file_mode=0770`: Sets the default permissions for *files* created from Ubuntu onto the Windows share. `0770` means the owner (you) and members of the group can read, write, and execute, while others have no access.
        *   `dir_mode=0770`: Sets the default permissions for *directories* created from Ubuntu onto the Windows share. Same permissions as `file_mode`.

9.  **`# --- Script Logic ---`**:
    *   Another comment marking the start of the main actions.

10. **`echo "Attempting to mount..."`**:
    *   Displays a message on your screen telling you what the script is starting to do. `echo` is the command to print text.

11. **`if [ ! -f "$CREDS_FILE" ]; then ... fi`**:
    *   This is a check. `[ ! -f "$CREDS_FILE" ]` tests if the credentials file (specified in `CREDS_FILE`) does *not* exist (`!`) as a regular file (`-f`).
    *   If the file is missing:
        *   It prints an error message explaining the problem.
        *   `exit 1`: It stops the script immediately. An exit code of `1` (or any non-zero number) usually signals an error.
    *   `fi`: Marks the end of the `if` block.

12. **`if ! dpkg -s cifs-utils > /dev/null 2>&1; then ... fi`**:
    *   Another check. `dpkg -s cifs-utils` queries the Ubuntu package manager to see if the `cifs-utils` package is installed.
    *   `> /dev/null 2>&1`: This part hides the normal output and error messages from the `dpkg` command, so you only see the script's custom error message if needed.
    *   `!`: This negates the result, so the `if` block runs if the package is *not* found.
    *   `cifs-utils`: This package provides the necessary tools (including the `mount.cifs` command used later) for Ubuntu to connect to Windows shares (CIFS/SMB protocol).
    *   If the package is missing:
        *   It prints an error message explaining that `cifs-utils` is needed and tells you how to install it (`sudo apt update && sudo apt install cifs-utils`).
        *   `exit 1`: It stops the script.
    *   `fi`: Marks the end of the `if` block.

13. **`for share_info in "${SHARES[@]}"; do ... done`**:
    *   This starts a loop. It will repeat the commands between `do` and `done` for each item listed in the `SHARES` array defined earlier.
    *   In each repetition (iteration), the variable `share_info` will hold one item from the list (e.g., `"F|windows_f_drive"` first, then `"G|windows_g_drive"`, etc.).

14. **`IFS='|' read -r share_name mount_suffix <<< "$share_info"`**:
    *   Inside the loop, this line processes the current `share_info` string (e.g., `"F|windows_f_drive"`).
    *   `IFS='|'`: Temporarily sets the "Internal Field Separator" to the pipe symbol (`|`). This tells the `read` command to split the text wherever it sees a `|`.
    *   `read -r share_name mount_suffix`: Reads the input and splits it based on the `|`. It puts the part before the `|` into the variable `share_name` (e.g., `F`) and the part after into `mount_suffix` (e.g., `windows_f_drive`). The `-r` prevents backslashes from being interpreted specially.
    *   `<<< "$share_info"`: Feeds the content of the `share_info` variable as input to the `read` command.

15. **`mount_point="/home/********/$mount_suffix"`**:
    *   Constructs the full path on your Ubuntu machine where the share should be mounted. It combines `/home/********/` with the `mount_suffix` obtained in the previous step (e.g., `/home/********/windows_f_drive`).

16. **`unc_path="//$WIN_IP/$share_name"`**:
    *   Constructs the network path to the Windows share. This is often called a UNC (Universal Naming Convention) path. It combines `//`, the Windows IP address (`$WIN_IP`), `/`, and the Windows share name (`$share_name`) (e.g., `//000.000.0.00/F`).

17. **`echo "-------------------------------------"` etc.**:
    *   Prints divider lines and status messages to the screen, showing which share is being processed and where it's supposed to be mounted.

18. **`mkdir -p "$mount_point"`**:
    *   Attempts to create the local directory (e.g., `/home/********/windows_f_drive`) where the share will be mounted.
    *   `-p`: This option is important. It means "create parent directories if they don't exist" and "don't complain if the directory already exists".

19. **`if [ $? -ne 0 ]; then ... continue ... fi`**:
    *   Checks the exit status of the *previous* command (`mkdir`). `$?` holds the exit code (0 usually means success, non-zero means error).
    *   `[ $? -ne 0 ]`: Checks if the exit code is *not equal* (`-ne`) to 0.
    *   If `mkdir` failed (e.g., due to permissions problems):
        *   Prints an error message.
        *   `continue`: Skips the rest of the commands inside the current loop iteration and jumps to the beginning of the loop for the next share.

20. **`if mountpoint -q "$mount_point"; then ... else ... fi`**:
    *   Checks if the directory is *already* a mount point (meaning a network share or another device is already connected there).
    *   `mountpoint -q`: This command checks silently (`-q`) if the path is a mount point.
    *   If it *is* already mounted:
        *   Prints an informational message saying it's already mounted.
    *   If it's *not* mounted (`else` block):
        *   Prints a message saying it's attempting to mount.
        *   **`sudo mount -t cifs "$unc_path" "$mount_point" -o "$MOUNT_OPTS"`**: This is the core command that actually connects the Windows share.
            *   `sudo`: Runs the `mount` command with administrator privileges (root access), which is required for mounting filesystems. You will likely be prompted for your Ubuntu password here.
            *   `mount`: The command to attach filesystems.
            *   `-t cifs`: Specifies the type of filesystem is `cifs` (Common Internet File System), which is the protocol Windows uses for sharing.
            *   `"$unc_path"`: The network path to the Windows share (e.g., `//000.000.0.00/F`).
            *   `"$mount_point"`: The local directory on Ubuntu where it should be mounted (e.g., `/home/********/windows_f_drive`).
            *   `-o "$MOUNT_OPTS"`: Applies all the connection options we defined earlier in the `MOUNT_OPTS` variable (credentials file, user ID, protocol version, etc.).
        *   **`if mountpoint -q "$mount_point"; then ... else ... fi` (Nested)**: *After* attempting the mount, this *inner* check verifies if the mount was successful by checking again if the directory is now a mount point.
            *   If successful: Prints a success message.
            *   If failed (`else` block): Prints an error message and provides helpful troubleshooting tips (check network, share name, credentials, firewall, protocol version).

21. **`done`**:
    *   Marks the end of the `for` loop. The script goes back to step 13 for the next item in the `SHARES` list, until all shares have been processed.

22. **`echo "-------------------------------------"` etc.**:
    *   Prints final messages indicating the whole process is finished.

23. **`exit 0`**:
    *   Exits the script cleanly. An exit code of `0` conventionally means the script completed successfully (even if some individual mounts failed, the script itself ran to completion).

**In Summary:**

The script configures connection details, checks for necessary prerequisites (credentials file, `cifs-utils`), then loops through a list of defined Windows shares. For each share, it creates a corresponding local directory (if needed), checks if it's already mounted, and if not, attempts to mount the Windows share to that local directory using the specified options and credentials, providing feedback on success or failure.
```
